import random
from baseline import compute_primes_and_K
from alternative import (
    make_prime_power_y,
    make_largest_primes_K,
    make_hybrid_prime_power_y
)

def simulate_empirical_rate(y, primes, trials=5000):
    return sum(1 for _ in range(trials) if y % random.choice(primes) == 0) / trials

def run_all_strategies(n_values, trials=5000, seed=42):
    random.seed(seed)

    print(" n  | strategy              |  N  |   D   | theory_rate | empirical_rate")
    print("----+------------------------+-----+--------+--------------+----------------")

    for n in n_values:
        primes, N0, D0, K0 = compute_primes_and_K(n)
        emp0 = simulate_empirical_rate(K0, primes, trials)
        print(f"{n:3d} | baseline              | {N0:3d} | {D0:6d} |   {N0/D0:.6f}   |   {emp0:.6f}")

        y1, N1, _ = make_prime_power_y(n)
        emp1 = simulate_empirical_rate(y1, primes, trials)
        print(f"{n:3d} | prime-power           | {N1:3d} | {D0:6d} |   {N1/D0:.6f}   |   {emp1:.6f}")

        y2, N2, _ = make_largest_primes_K(n)
        emp2 = simulate_empirical_rate(y2, primes, trials)
        print(f"{n:3d} | largest-primes        | {N2:3d} | {D0:6d} |   {N2/D0:.6f}   |   {emp2:.6f}")

        y3, N3, _ = make_hybrid_prime_power_y(n)
        emp3 = simulate_empirical_rate(y3, primes, trials)
        print(f"{n:3d} | hybrid prime-powers   | {N3:3d} | {D0:6d} |   {N3/D0:.6f}   |   {emp3:.6f}")
        print()

# Example usage
if __name__ == "__main__":
    run_all_strategies(n_values=[10, 20, 50, 100, 200, 500])
