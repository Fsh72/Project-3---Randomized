
from sympy import primerange
from math import lcm


def make_prime_power_y(n):
    primes = list(primerange(n + 1, n * n))
    D = len(primes)
    if D == 0:
        return 1, 0, 0
    q = primes[0]
    limit = 2**n - 1
    m = 1
    while q**(m + 1) < limit:
        m += 1
    return q**m, 1, D

def make_largest_primes_K(n):
    primes = list(primerange(n + 1, n * n))
    D = len(primes)
    K, N = 1, 0
    for p in reversed(primes):
        if K * p < 2**n - 1:
            K *= p
            N += 1
        else:
            break
    return K, N, D

def make_hybrid_prime_power_y(n):
    primes = list(primerange(n + 1, int(1.5 * n)))  # slightly above n
    if not primes:
        return 1, 0, 0
    exponents = [2] * min(5, len(primes))  # square a few of them
    y = 1
    for p, e in zip(primes, exponents):
        if y * (p**e) >= 2**n:
            break
        y *= p**e
    big_primes = list(primerange(n + 1, n * n))
    D = len(big_primes)
    N = sum(1 for p in big_primes if y % p == 0)
    return y, N, D
# -----------------------------
# Test strategies
if __name__ == "__main__":
    ns = [10, 20, 50, 100]
    print(" n | strategy           |  N  |   D   |  rate (N/D)")
    print("----+--------------------+-----+--------+--------------")
    for n in ns:
        y1, N1, D1 = make_prime_power_y(n)
        y2, N2, D2 = make_largest_primes_K(n)
        y3, N3, D3 = make_hybrid_prime_power_y(n)
        y4, N4, D4 = make_lcm_strategy_y(n)

        print(f"{n:3d} | prime-power         | {N1:3d} | {D1:6d} | {N1/D1:0.6f}")
        print(f"{n:3d} | largest-primes      | {N2:3d} | {D2:6d} | {N2/D2:0.6f}")
        print(f"{n:3d} | hybrid prime-power | {N3:3d} | {D3:6d} | {N3/D3:0.6f}")
        print(f"{n:3d} | LCM composite        | {N4:3d} | {D4:6d} | {N4/D4:0.6f}")
        print()
